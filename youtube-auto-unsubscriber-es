async function unsubscribeFromChannel(channelRow) {
    try {
        // Find the subscribe button within this channel's row
        const subscribeButton = channelRow.querySelector('ytd-subscribe-button-renderer button');
        if (!subscribeButton) {
            console.log('Botón de suscripción no encontrado');
            return false;
        }

        // Click the subscribe button to open the dialog
        subscribeButton.click();
        await new Promise(resolve => setTimeout(resolve, 1000));

        // Find and click the "Anular suscripción" link in the dialog
        const unsubscribeButton = Array.from(document.querySelectorAll('yt-button-renderer a'))
            .find(link => link.textContent.trim() === 'Anular suscripción');
        
        if (!unsubscribeButton) {
            // Try alternative selector if the first one fails
            const altUnsubscribeButton = document.querySelector('button[aria-label="Anular suscripción"]');
            if (!altUnsubscribeButton) {
                console.log('Botón de anular suscripción no encontrado');
                return false;
            }
            altUnsubscribeButton.click();
        } else {
            unsubscribeButton.click();
        }

        // Add a longer delay to ensure the unsubscribe action completes
        await new Promise(resolve => setTimeout(resolve, 2000));
        
        return true;
    } catch (error) {
        console.error('Error durante el proceso:', error);
        return false;
    }
}

async function massUnsubscribe() {
    // Find all channel rows
    const channelRows = document.querySelectorAll('ytd-channel-renderer');
    const totalChannels = channelRows.length;
    
    console.log(`Encontrados ${totalChannels} canales para procesar`);
    
    let successCount = 0;
    let failCount = 0;

    for (let i = 0; i < channelRows.length; i++) {
        const channelName = channelRows[i].querySelector('#channel-title')?.textContent?.trim() || 'Canal Desconocido';
        console.log(`Procesando ${i + 1}/${totalChannels}: ${channelName}`);
        
        const success = await unsubscribeFromChannel(channelRows[i]);
        
        if (success) {
            successCount++;
            console.log(`✅ Anulada suscripción de: ${channelName}`);
        } else {
            failCount++;
            console.log(`❌ Error al anular suscripción de: ${channelName}`);
        }
        
        // Wait between unsubscriptions to avoid overwhelming YouTube
        await new Promise(resolve => setTimeout(resolve, 2000));
    }
    
    console.log(`
    =================
    Proceso Completado
    =================
    Suscripciones anuladas con éxito: ${successCount}
    Fallos: ${failCount}
    Total procesados: ${totalChannels}
    `);
}

// Start the unsubscription process
console.log('Iniciando proceso de anulación masiva de suscripciones...');
massUnsubscribe().catch(error => console.error('Error fatal:', error));